// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Lobby.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  /// <summary>
  ///登录请求
  /// </summary>
  public partial class C2R_Login : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Login> _parser = new pb::MessageParser<C2R_Login>(() => (C2R_Login)MessagePool.Instance.Fetch(typeof(C2R_Login)));
    public static pb::MessageParser<C2R_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long serverVersion_;
    /// <summary>
    ///客户端对应的服务器版本号
    /// </summary>
    public long ServerVersion {
      get { return serverVersion_; }
      set {
        serverVersion_ = value;
      }
    }

    private string accounts_ = "";
    /// <summary>
    ///登录帐号
    /// </summary>
    public string Accounts {
      get { return accounts_; }
      set {
        accounts_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    /// <summary>
    ///登录密码
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string machineCode_ = "";
    /// <summary>
    ///客户端机器码
    /// </summary>
    public string MachineCode {
      get { return machineCode_; }
      set {
        machineCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long channelId_;
    /// <summary>
    ///客户端的渠道号
    /// </summary>
    public long ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    private int platformId_;
    /// <summary>
    ///客户端平台号
    /// </summary>
    public int PlatformId {
      get { return platformId_; }
      set {
        platformId_ = value;
      }
    }

    private string phoneCode_ = "";
    /// <summary>
    ///客户端的手机型号			
    /// </summary>
    public string PhoneCode {
      get { return phoneCode_; }
      set {
        phoneCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerVersion != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(ServerVersion);
      }
      if (Accounts.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Accounts);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (MachineCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MachineCode);
      }
      if (ChannelId != 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(ChannelId);
      }
      if (PlatformId != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(PlatformId);
      }
      if (PhoneCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PhoneCode);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (ServerVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ServerVersion);
      }
      if (Accounts.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Accounts);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (MachineCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineCode);
      }
      if (ChannelId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ChannelId);
      }
      if (PlatformId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PlatformId);
      }
      if (PhoneCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhoneCode);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      serverVersion_ = 0;
      accounts_ = "";
      password_ = "";
      machineCode_ = "";
      channelId_ = 0;
      platformId_ = 0;
      phoneCode_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerVersion = input.ReadSInt64();
            break;
          }
          case 18: {
            Accounts = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            MachineCode = input.ReadString();
            break;
          }
          case 40: {
            ChannelId = input.ReadSInt64();
            break;
          }
          case 48: {
            PlatformId = input.ReadSInt32();
            break;
          }
          case 58: {
            PhoneCode = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Login : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Login> _parser = new pb::MessageParser<R2C_Login>(() => (R2C_Login)MessagePool.Instance.Fetch(typeof(R2C_Login)));
    public static pb::MessageParser<R2C_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string gateIPAddress_ = "";
    /// <summary>
    ///Gate地址
    /// </summary>
    public string GateIPAddress {
      get { return gateIPAddress_; }
      set {
        gateIPAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string loginKey_ = "";
    /// <summary>
    ///Gate登录Key
    /// </summary>
    public string LoginKey {
      get { return loginKey_; }
      set {
        loginKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GateIPAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GateIPAddress);
      }
      if (LoginKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LoginKey);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteSInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (GateIPAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GateIPAddress);
      }
      if (LoginKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginKey);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gateIPAddress_ = "";
      loginKey_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GateIPAddress = input.ReadString();
            break;
          }
          case 18: {
            LoginKey = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 728: {
            Error = input.ReadSInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登录请求
  /// </summary>
  public partial class C2R_Register : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Register> _parser = new pb::MessageParser<C2R_Register>(() => (C2R_Register)MessagePool.Instance.Fetch(typeof(C2R_Register)));
    public static pb::MessageParser<C2R_Register> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string accounts_ = "";
    /// <summary>
    ///登录帐号
    /// </summary>
    public string Accounts {
      get { return accounts_; }
      set {
        accounts_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    /// <summary>
    ///登录密码
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string nickName_ = "";
    /// <summary>
    ///昵称
    /// </summary>
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string machineCode_ = "";
    /// <summary>
    ///客户端机器码
    /// </summary>
    public string MachineCode {
      get { return machineCode_; }
      set {
        machineCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int channelId_;
    /// <summary>
    ///客户端的渠道号
    /// </summary>
    public int ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    private int spreadCode_;
    /// <summary>
    ///推广号		
    /// </summary>
    public int SpreadCode {
      get { return spreadCode_; }
      set {
        spreadCode_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Accounts.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Accounts);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NickName);
      }
      if (MachineCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MachineCode);
      }
      if (ChannelId != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(ChannelId);
      }
      if (SpreadCode != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(SpreadCode);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (Accounts.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Accounts);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (MachineCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineCode);
      }
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ChannelId);
      }
      if (SpreadCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SpreadCode);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      accounts_ = "";
      password_ = "";
      nickName_ = "";
      machineCode_ = "";
      channelId_ = 0;
      spreadCode_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Accounts = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            NickName = input.ReadString();
            break;
          }
          case 42: {
            MachineCode = input.ReadString();
            break;
          }
          case 48: {
            ChannelId = input.ReadSInt32();
            break;
          }
          case 56: {
            SpreadCode = input.ReadSInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Register : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Register> _parser = new pb::MessageParser<R2C_Register>(() => (R2C_Register)MessagePool.Instance.Fetch(typeof(R2C_Register)));
    public static pb::MessageParser<R2C_Register> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteSInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 728: {
            Error = input.ReadSInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登录网关
  /// </summary>
  public partial class C2G_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<C2G_LoginGate> _parser = new pb::MessageParser<C2G_LoginGate>(() => (C2G_LoginGate)MessagePool.Instance.Fetch(typeof(C2G_LoginGate)));
    public static pb::MessageParser<C2G_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string loginKey_ = "";
    /// <summary>
    ///登录密钥
    /// </summary>
    public string LoginKey {
      get { return loginKey_; }
      set {
        loginKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string machineCode_ = "";
    /// <summary>
    ///客户端机器码
    /// </summary>
    public string MachineCode {
      get { return machineCode_; }
      set {
        machineCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LoginKey);
      }
      if (MachineCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MachineCode);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (LoginKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginKey);
      }
      if (MachineCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineCode);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      loginKey_ = "";
      machineCode_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LoginKey = input.ReadString();
            break;
          }
          case 18: {
            MachineCode = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_LoginGate> _parser = new pb::MessageParser<G2C_LoginGate>(() => (G2C_LoginGate)MessagePool.Instance.Fetch(typeof(G2C_LoginGate)));
    public static pb::MessageParser<G2C_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long longKey_;
    /// <summary>
    ///长期tolken
    /// </summary>
    public long LongKey {
      get { return longKey_; }
      set {
        longKey_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (LongKey != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(LongKey);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteSInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (LongKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LongKey);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      longKey_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LongKey = input.ReadSInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 728: {
            Error = input.ReadSInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_Heart : pb::IMessage {
    private static readonly pb::MessageParser<C2G_Heart> _parser = new pb::MessageParser<C2G_Heart>(() => (C2G_Heart)MessagePool.Instance.Fetch(typeof(C2G_Heart)));
    public static pb::MessageParser<C2G_Heart> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///亲友圈信息 
  /// </summary>
  public partial class ClubInfo : pb::IMessage {
    private static readonly pb::MessageParser<ClubInfo> _parser = new pb::MessageParser<ClubInfo>(() => (ClubInfo)MessagePool.Instance.Fetch(typeof(ClubInfo)));
    public static pb::MessageParser<ClubInfo> Parser { get { return _parser; } }

    private int clubId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public int ClubId {
      get { return clubId_; }
      set {
        clubId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    ///亲友圈名字
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long ownGameId_;
    /// <summary>
    ///创建人UserId
    /// </summary>
    public long OwnGameId {
      get { return ownGameId_; }
      set {
        ownGameId_ = value;
      }
    }

    private int userCount_;
    /// <summary>
    ///人数
    /// </summary>
    public int UserCount {
      get { return userCount_; }
      set {
        userCount_ = value;
      }
    }

    private int tableCount_;
    /// <summary>
    ///桌子数
    /// </summary>
    public int TableCount {
      get { return tableCount_; }
      set {
        tableCount_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_gameKindIds_codec
        = pb::FieldCodec.ForSInt32(50);
    private pbc::RepeatedField<int> gameKindIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///朋友圈开通的游戏类型
    /// </summary>
    public pbc::RepeatedField<int> GameKindIds {
      get { return gameKindIds_; }
      set { gameKindIds_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ClubId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ClubId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (OwnGameId != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(OwnGameId);
      }
      if (UserCount != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(UserCount);
      }
      if (TableCount != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(TableCount);
      }
      gameKindIds_.WriteTo(output, _repeated_gameKindIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (ClubId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ClubId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (OwnGameId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(OwnGameId);
      }
      if (UserCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(UserCount);
      }
      if (TableCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TableCount);
      }
      size += gameKindIds_.CalculateSize(_repeated_gameKindIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      clubId_ = 0;
      name_ = "";
      ownGameId_ = 0;
      userCount_ = 0;
      tableCount_ = 0;
      gameKindIds_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClubId = input.ReadSInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            OwnGameId = input.ReadSInt64();
            break;
          }
          case 32: {
            UserCount = input.ReadSInt32();
            break;
          }
          case 40: {
            TableCount = input.ReadSInt32();
            break;
          }
          case 50:
          case 48: {
            gameKindIds_.AddEntriesFrom(input, _repeated_gameKindIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///桌子信息
  /// </summary>
  public partial class TableInfo : pb::IMessage {
    private static readonly pb::MessageParser<TableInfo> _parser = new pb::MessageParser<TableInfo>(() => (TableInfo)MessagePool.Instance.Fetch(typeof(TableInfo)));
    public static pb::MessageParser<TableInfo> Parser { get { return _parser; } }

    private int gameKindId_;
    /// <summary>
    ///桌子所属的游戏
    /// </summary>
    public int GameKindId {
      get { return gameKindId_; }
      set {
        gameKindId_ = value;
      }
    }

    private int tableId_;
    /// <summary>
    ///桌子编号
    /// </summary>
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    private int currentTrun_;
    /// <summary>
    ///桌子当前轮数
    /// </summary>
    public int CurrentTrun {
      get { return currentTrun_; }
      set {
        currentTrun_ = value;
      }
    }

    private int status_;
    /// <summary>
    ///桌子状态 0取消 1空闲 2游戏中	
    /// </summary>
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TableId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(TableId);
      }
      if (GameKindId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(GameKindId);
      }
      if (CurrentTrun != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(CurrentTrun);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Status);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GameKindId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameKindId);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TableId);
      }
      if (CurrentTrun != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CurrentTrun);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Status);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      tableId_ = 0;
      gameKindId_ = 0;
      currentTrun_ = 0;
      status_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TableId = input.ReadSInt32();
            break;
          }
          case 16: {
            GameKindId = input.ReadSInt32();
            break;
          }
          case 24: {
            CurrentTrun = input.ReadSInt32();
            break;
          }
          case 32: {
            Status = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户信息
  /// </summary>
  public partial class UserInfo : pb::IMessage {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => (UserInfo)MessagePool.Instance.Fetch(typeof(UserInfo)));
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    private long gameId_;
    /// <summary>
    ///用户编号
    /// </summary>
    public long GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private string icon_ = "";
    /// <summary>
    ///用户头像
    /// </summary>
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string name_ = "";
    /// <summary>
    ///用户名称
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool gender_;
    /// <summary>
    ///用户性别
    /// </summary>
    public bool Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    private int clubId_;
    /// <summary>
    ///用户当前所在的俱乐部
    /// </summary>
    public int ClubId {
      get { return clubId_; }
      set {
        clubId_ = value;
      }
    }

    private int tableId_;
    /// <summary>
    ///用户当前桌子号
    /// </summary>
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    private int chiarId_;
    /// <summary>
    ///用户当前椅子号
    /// </summary>
    public int ChiarId {
      get { return chiarId_; }
      set {
        chiarId_ = value;
      }
    }

    private int status_;
    /// <summary>
    ///0用户离开俱乐部 2用户上桌 3用户游戏中 4断线中 
    /// </summary>
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    private long score_;
    /// <summary>
    ///用户分数
    /// </summary>
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(GameId);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Icon);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Gender != false) {
        output.WriteRawTag(32);
        output.WriteBool(Gender);
      }
      if (ClubId != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(ClubId);
      }
      if (TableId != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(TableId);
      }
      if (ChiarId != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(ChiarId);
      }
      if (Status != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(Status);
      }
      if (Score != 0L) {
        output.WriteRawTag(80);
        output.WriteSInt64(Score);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GameId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(GameId);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Gender != false) {
        size += 1 + 1;
      }
      if (ClubId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ClubId);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TableId);
      }
      if (ChiarId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ChiarId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Status);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Score);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      icon_ = "";
      name_ = "";
      gender_ = false;
      clubId_ = 0;
      tableId_ = 0;
      chiarId_ = 0;
      status_ = 0;
      score_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadSInt64();
            break;
          }
          case 18: {
            Icon = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Gender = input.ReadBool();
            break;
          }
          case 48: {
            ClubId = input.ReadSInt32();
            break;
          }
          case 56: {
            TableId = input.ReadSInt32();
            break;
          }
          case 64: {
            ChiarId = input.ReadSInt32();
            break;
          }
          case 72: {
            Status = input.ReadSInt32();
            break;
          }
          case 80: {
            Score = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///中心下发用户信息 
  /// </summary>
  public partial class Actor_CurrUserInfo : pb::IMessage {
    private static readonly pb::MessageParser<Actor_CurrUserInfo> _parser = new pb::MessageParser<Actor_CurrUserInfo>(() => (Actor_CurrUserInfo)MessagePool.Instance.Fetch(typeof(Actor_CurrUserInfo)));
    public static pb::MessageParser<Actor_CurrUserInfo> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.UserInfo userInfo_;
    public global::ETHotfix.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ClubInfo> _repeated_clubInfos_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.ClubInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.ClubInfo> clubInfos_ = new pbc::RepeatedField<global::ETHotfix.ClubInfo>();
    /// <summary>
    ///用户所有的朋友圈信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.ClubInfo> ClubInfos {
      get { return clubInfos_; }
      set { clubInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserInfo);
      }
      clubInfos_.WriteTo(output, _repeated_clubInfos_codec);
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      size += clubInfos_.CalculateSize(_repeated_clubInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (userInfo_ != null) MessagePool.Instance.Recycle(userInfo_); userInfo_ = null;
      for (int i = 0; i < clubInfos_.Count; i++) { MessagePool.Instance.Recycle(clubInfos_[i]); }
      clubInfos_.Clear();
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userInfo_ == null) {
              userInfo_ = new global::ETHotfix.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
          case 26: {
            clubInfos_.AddEntriesFrom(input, _repeated_clubInfos_codec);
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///俱乐部桌子信息列表,如果用户在club中，下发用户信息后接着下发，或在进入俱乐部后下发
  /// </summary>
  public partial class Actor_TablelInfoList : pb::IMessage {
    private static readonly pb::MessageParser<Actor_TablelInfoList> _parser = new pb::MessageParser<Actor_TablelInfoList>(() => (Actor_TablelInfoList)MessagePool.Instance.Fetch(typeof(Actor_TablelInfoList)));
    public static pb::MessageParser<Actor_TablelInfoList> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TableInfo> _repeated_tableInfo_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.TableInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.TableInfo> tableInfo_ = new pbc::RepeatedField<global::ETHotfix.TableInfo>();
    public pbc::RepeatedField<global::ETHotfix.TableInfo> TableInfo {
      get { return tableInfo_; }
      set { tableInfo_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      tableInfo_.WriteTo(output, _repeated_tableInfo_codec);
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      size += tableInfo_.CalculateSize(_repeated_tableInfo_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < tableInfo_.Count; i++) { MessagePool.Instance.Recycle(tableInfo_[i]); }
      tableInfo_.Clear();
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tableInfo_.AddEntriesFrom(input, _repeated_tableInfo_codec);
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///俱乐部进入用户信息列表，在ClubInfo后下发
  /// </summary>
  public partial class Actor_UserComes : pb::IMessage {
    private static readonly pb::MessageParser<Actor_UserComes> _parser = new pb::MessageParser<Actor_UserComes>(() => (Actor_UserComes)MessagePool.Instance.Fetch(typeof(Actor_UserComes)));
    public static pb::MessageParser<Actor_UserComes> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.UserInfo> _repeated_userInfo_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.UserInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.UserInfo> userInfo_ = new pbc::RepeatedField<global::ETHotfix.UserInfo>();
    public pbc::RepeatedField<global::ETHotfix.UserInfo> UserInfo {
      get { return userInfo_; }
      set { userInfo_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      userInfo_.WriteTo(output, _repeated_userInfo_codec);
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      size += userInfo_.CalculateSize(_repeated_userInfo_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < userInfo_.Count; i++) { MessagePool.Instance.Recycle(userInfo_[i]); }
      userInfo_.Clear();
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userInfo_.AddEntriesFrom(input, _repeated_userInfo_codec);
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///增加桌子
  /// </summary>
  public partial class Actor_TableCreate : pb::IMessage {
    private static readonly pb::MessageParser<Actor_TableCreate> _parser = new pb::MessageParser<Actor_TableCreate>(() => (Actor_TableCreate)MessagePool.Instance.Fetch(typeof(Actor_TableCreate)));
    public static pb::MessageParser<Actor_TableCreate> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.TableInfo tableInfo_;
    public global::ETHotfix.TableInfo TableInfo {
      get { return tableInfo_; }
      set {
        tableInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (tableInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TableInfo);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      if (tableInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (tableInfo_ != null) MessagePool.Instance.Recycle(tableInfo_); tableInfo_ = null;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (tableInfo_ == null) {
              tableInfo_ = new global::ETHotfix.TableInfo();
            }
            input.ReadMessage(tableInfo_);
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///删除桌子
  /// </summary>
  public partial class Actor_TableDestroy : pb::IMessage {
    private static readonly pb::MessageParser<Actor_TableDestroy> _parser = new pb::MessageParser<Actor_TableDestroy>(() => (Actor_TableDestroy)MessagePool.Instance.Fetch(typeof(Actor_TableDestroy)));
    public static pb::MessageParser<Actor_TableDestroy> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int tableId_;
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TableId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(TableId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TableId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      tableId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TableId = input.ReadSInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///桌子状态改变
  /// </summary>
  public partial class Actor_TableStatus : pb::IMessage {
    private static readonly pb::MessageParser<Actor_TableStatus> _parser = new pb::MessageParser<Actor_TableStatus>(() => (Actor_TableStatus)MessagePool.Instance.Fetch(typeof(Actor_TableStatus)));
    public static pb::MessageParser<Actor_TableStatus> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int tableId_;
    /// <summary>
    ///桌子编号
    /// </summary>
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    private int currentTrun_;
    /// <summary>
    ///当前第几轮
    /// </summary>
    public int CurrentTrun {
      get { return currentTrun_; }
      set {
        currentTrun_ = value;
      }
    }

    private int status_;
    /// <summary>
    ///桌子状态
    /// </summary>
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TableId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(TableId);
      }
      if (CurrentTrun != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(CurrentTrun);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Status);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TableId);
      }
      if (CurrentTrun != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CurrentTrun);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Status);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      tableId_ = 0;
      currentTrun_ = 0;
      status_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TableId = input.ReadSInt32();
            break;
          }
          case 16: {
            CurrentTrun = input.ReadSInt32();
            break;
          }
          case 24: {
            Status = input.ReadSInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户状态改变
  /// </summary>
  public partial class Actor_UserStatus : pb::IMessage {
    private static readonly pb::MessageParser<Actor_UserStatus> _parser = new pb::MessageParser<Actor_UserStatus>(() => (Actor_UserStatus)MessagePool.Instance.Fetch(typeof(Actor_UserStatus)));
    public static pb::MessageParser<Actor_UserStatus> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long gameId_;
    /// <summary>
    ///用户编号
    /// </summary>
    public long GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int tableId_;
    /// <summary>
    ///桌子编号
    /// </summary>
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    private int chiarId_;
    /// <summary>
    ///椅子编号
    /// </summary>
    public int ChiarId {
      get { return chiarId_; }
      set {
        chiarId_ = value;
      }
    }

    private int status_;
    /// <summary>
    ///用户状态		
    /// </summary>
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(GameId);
      }
      if (TableId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(TableId);
      }
      if (ChiarId != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(ChiarId);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Status);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      if (GameId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(GameId);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TableId);
      }
      if (ChiarId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ChiarId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Status);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      tableId_ = 0;
      chiarId_ = 0;
      status_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadSInt64();
            break;
          }
          case 16: {
            TableId = input.ReadSInt32();
            break;
          }
          case 24: {
            ChiarId = input.ReadSInt32();
            break;
          }
          case 32: {
            Status = input.ReadSInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户分数改变
  /// </summary>
  public partial class Actor_UserScore : pb::IMessage {
    private static readonly pb::MessageParser<Actor_UserScore> _parser = new pb::MessageParser<Actor_UserScore>(() => (Actor_UserScore)MessagePool.Instance.Fetch(typeof(Actor_UserScore)));
    public static pb::MessageParser<Actor_UserScore> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long gameId_;
    /// <summary>
    ///用户编号
    /// </summary>
    public long GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private long score_;
    /// <summary>
    ///当前分数
    /// </summary>
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(GameId);
      }
      if (Score != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Score);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      if (GameId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(GameId);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Score);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      score_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadSInt64();
            break;
          }
          case 16: {
            Score = input.ReadSInt64();
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///client-centor //////////////////////////////////////////////////////////////////////////////
  ///申请加入俱乐部
  /// </summary>
  public partial class Actor_JoinClubRequest : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoinClubRequest> _parser = new pb::MessageParser<Actor_JoinClubRequest>(() => (Actor_JoinClubRequest)MessagePool.Instance.Fetch(typeof(Actor_JoinClubRequest)));
    public static pb::MessageParser<Actor_JoinClubRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long clubId_;
    /// <summary>
    ///朋友圈ID
    /// </summary>
    public long ClubId {
      get { return clubId_; }
      set {
        clubId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ClubId != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(ClubId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      if (ClubId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ClubId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      clubId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClubId = input.ReadSInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_JoinClubResponse : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoinClubResponse> _parser = new pb::MessageParser<Actor_JoinClubResponse>(() => (Actor_JoinClubResponse)MessagePool.Instance.Fetch(typeof(Actor_JoinClubResponse)));
    public static pb::MessageParser<Actor_JoinClubResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteSInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 728: {
            Error = input.ReadSInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///申请加入俱乐部
  /// </summary>
  public partial class Actor_QuitClubRequest : pb::IMessage {
    private static readonly pb::MessageParser<Actor_QuitClubRequest> _parser = new pb::MessageParser<Actor_QuitClubRequest>(() => (Actor_QuitClubRequest)MessagePool.Instance.Fetch(typeof(Actor_QuitClubRequest)));
    public static pb::MessageParser<Actor_QuitClubRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int clubId_;
    /// <summary>
    ///朋友圈ID
    /// </summary>
    public int ClubId {
      get { return clubId_; }
      set {
        clubId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ClubId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ClubId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      if (ClubId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ClubId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      clubId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClubId = input.ReadSInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_QuitClubResponse : pb::IMessage {
    private static readonly pb::MessageParser<Actor_QuitClubResponse> _parser = new pb::MessageParser<Actor_QuitClubResponse>(() => (Actor_QuitClubResponse)MessagePool.Instance.Fetch(typeof(Actor_QuitClubResponse)));
    public static pb::MessageParser<Actor_QuitClubResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteSInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 728: {
            Error = input.ReadSInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端进入俱乐部，中心服务器下发俱乐部所有信息，并开始同步状态
  /// </summary>
  public partial class Actor_InClubRequest : pb::IMessage {
    private static readonly pb::MessageParser<Actor_InClubRequest> _parser = new pb::MessageParser<Actor_InClubRequest>(() => (Actor_InClubRequest)MessagePool.Instance.Fetch(typeof(Actor_InClubRequest)));
    public static pb::MessageParser<Actor_InClubRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int clubId_;
    /// <summary>
    ///朋友圈ID
    /// </summary>
    public int ClubId {
      get { return clubId_; }
      set {
        clubId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ClubId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ClubId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      if (ClubId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ClubId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      clubId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClubId = input.ReadSInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_InClubResponse : pb::IMessage {
    private static readonly pb::MessageParser<Actor_InClubResponse> _parser = new pb::MessageParser<Actor_InClubResponse>(() => (Actor_InClubResponse)MessagePool.Instance.Fetch(typeof(Actor_InClubResponse)));
    public static pb::MessageParser<Actor_InClubResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteSInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 728: {
            Error = input.ReadSInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端推出俱乐部
  /// </summary>
  public partial class Actor_OutClubRequest : pb::IMessage {
    private static readonly pb::MessageParser<Actor_OutClubRequest> _parser = new pb::MessageParser<Actor_OutClubRequest>(() => (Actor_OutClubRequest)MessagePool.Instance.Fetch(typeof(Actor_OutClubRequest)));
    public static pb::MessageParser<Actor_OutClubRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int clubId_;
    /// <summary>
    ///朋友圈ID
    /// </summary>
    public int ClubId {
      get { return clubId_; }
      set {
        clubId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ClubId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ClubId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      if (ClubId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ClubId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      clubId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClubId = input.ReadSInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_OutClubResponse : pb::IMessage {
    private static readonly pb::MessageParser<Actor_OutClubResponse> _parser = new pb::MessageParser<Actor_OutClubResponse>(() => (Actor_OutClubResponse)MessagePool.Instance.Fetch(typeof(Actor_OutClubResponse)));
    public static pb::MessageParser<Actor_OutClubResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteSInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 728: {
            Error = input.ReadSInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端请求中心服务器上桌
  /// </summary>
  public partial class Actor_SitdownRequest : pb::IMessage {
    private static readonly pb::MessageParser<Actor_SitdownRequest> _parser = new pb::MessageParser<Actor_SitdownRequest>(() => (Actor_SitdownRequest)MessagePool.Instance.Fetch(typeof(Actor_SitdownRequest)));
    public static pb::MessageParser<Actor_SitdownRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int tableId_;
    /// <summary>
    ///桌子编号
    /// </summary>
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    private int chairId_;
    /// <summary>
    ///椅子编号
    /// </summary>
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TableId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(TableId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(ChairId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TableId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ChairId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      tableId_ = 0;
      chairId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TableId = input.ReadSInt32();
            break;
          }
          case 16: {
            ChairId = input.ReadSInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_SitdownResponse : pb::IMessage {
    private static readonly pb::MessageParser<Actor_SitdownResponse> _parser = new pb::MessageParser<Actor_SitdownResponse>(() => (Actor_SitdownResponse)MessagePool.Instance.Fetch(typeof(Actor_SitdownResponse)));
    public static pb::MessageParser<Actor_SitdownResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteSInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 728: {
            Error = input.ReadSInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户请求中心服务器离桌
  /// </summary>
  public partial class Actor_StandupRequest : pb::IMessage {
    private static readonly pb::MessageParser<Actor_StandupRequest> _parser = new pb::MessageParser<Actor_StandupRequest>(() => (Actor_StandupRequest)MessagePool.Instance.Fetch(typeof(Actor_StandupRequest)));
    public static pb::MessageParser<Actor_StandupRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_StandupResponse : pb::IMessage {
    private static readonly pb::MessageParser<Actor_StandupResponse> _parser = new pb::MessageParser<Actor_StandupResponse>(() => (Actor_StandupResponse)MessagePool.Instance.Fetch(typeof(Actor_StandupResponse)));
    public static pb::MessageParser<Actor_StandupResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteSInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 728: {
            Error = input.ReadSInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户请求中心服务服务器准备
  /// </summary>
  public partial class Actor_ReadyRequest : pb::IMessage {
    private static readonly pb::MessageParser<Actor_ReadyRequest> _parser = new pb::MessageParser<Actor_ReadyRequest>(() => (Actor_ReadyRequest)MessagePool.Instance.Fetch(typeof(Actor_ReadyRequest)));
    public static pb::MessageParser<Actor_ReadyRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_ReadyResponse : pb::IMessage {
    private static readonly pb::MessageParser<Actor_ReadyResponse> _parser = new pb::MessageParser<Actor_ReadyResponse>(() => (Actor_ReadyResponse)MessagePool.Instance.Fetch(typeof(Actor_ReadyResponse)));
    public static pb::MessageParser<Actor_ReadyResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteSInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 728: {
            Error = input.ReadSInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户请求中心服务器取消准备
  /// </summary>
  public partial class Actor_UnReadyRequest : pb::IMessage {
    private static readonly pb::MessageParser<Actor_UnReadyRequest> _parser = new pb::MessageParser<Actor_UnReadyRequest>(() => (Actor_UnReadyRequest)MessagePool.Instance.Fetch(typeof(Actor_UnReadyRequest)));
    public static pb::MessageParser<Actor_UnReadyRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_UnReadyResponse : pb::IMessage {
    private static readonly pb::MessageParser<Actor_UnReadyResponse> _parser = new pb::MessageParser<Actor_UnReadyResponse>(() => (Actor_UnReadyResponse)MessagePool.Instance.Fetch(typeof(Actor_UnReadyResponse)));
    public static pb::MessageParser<Actor_UnReadyResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteSInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadSInt32();
            break;
          }
          case 728: {
            Error = input.ReadSInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端请求拉取游戏信息
  /// </summary>
  public partial class Actor_GetGameInfo : pb::IMessage {
    private static readonly pb::MessageParser<Actor_GetGameInfo> _parser = new pb::MessageParser<Actor_GetGameInfo>(() => (Actor_GetGameInfo)MessagePool.Instance.Fetch(typeof(Actor_GetGameInfo)));
    public static pb::MessageParser<Actor_GetGameInfo> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteSInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 752: {
            ActorId = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
